#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4127)
#pragma warning(disable : 4996)
#pragma warning(disable : 5054)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockUpdate.proto

#include "BlockUpdate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_BlockUpdate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockUpdate_Vector3_BlockUpdate_2eproto;
namespace packet {
class BlockUpdate_Vector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockUpdate_Vector3> _instance;
} _BlockUpdate_Vector3_default_instance_;
class BlockUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockUpdate> _instance;
} _BlockUpdate_default_instance_;
}  // namespace packet
static void InitDefaultsscc_info_BlockUpdate_BlockUpdate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packet::_BlockUpdate_default_instance_;
    new (ptr) ::packet::BlockUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlockUpdate_BlockUpdate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlockUpdate_BlockUpdate_2eproto}, {
      &scc_info_BlockUpdate_Vector3_BlockUpdate_2eproto.base,}};

static void InitDefaultsscc_info_BlockUpdate_Vector3_BlockUpdate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packet::_BlockUpdate_Vector3_default_instance_;
    new (ptr) ::packet::BlockUpdate_Vector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockUpdate_Vector3_BlockUpdate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockUpdate_Vector3_BlockUpdate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BlockUpdate_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_BlockUpdate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BlockUpdate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BlockUpdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packet::BlockUpdate_Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::packet::BlockUpdate_Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::packet::BlockUpdate_Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::packet::BlockUpdate_Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packet::BlockUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::packet::BlockUpdate, packetid_),
  PROTOBUF_FIELD_OFFSET(::packet::BlockUpdate, position_),
  PROTOBUF_FIELD_OFFSET(::packet::BlockUpdate, block_),
  PROTOBUF_FIELD_OFFSET(::packet::BlockUpdate, blockdata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::packet::BlockUpdate_Vector3)},
  { 8, -1, sizeof(::packet::BlockUpdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packet::_BlockUpdate_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packet::_BlockUpdate_default_instance_),
};

const char descriptor_table_protodef_BlockUpdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021BlockUpdate.proto\022\006packet\"\234\001\n\013BlockUpd"
  "ate\022\020\n\010packetId\030\001 \001(\005\022-\n\010position\030\002 \001(\0132"
  "\033.packet.BlockUpdate.Vector3\022\r\n\005block\030\003 "
  "\001(\005\022\021\n\tblockData\030\004 \001(\005\032*\n\007Vector3\022\t\n\001x\030\001"
  " \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_BlockUpdate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_BlockUpdate_2eproto_sccs[2] = {
  &scc_info_BlockUpdate_BlockUpdate_2eproto.base,
  &scc_info_BlockUpdate_Vector3_BlockUpdate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BlockUpdate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BlockUpdate_2eproto = {
  false, false, descriptor_table_protodef_BlockUpdate_2eproto, "BlockUpdate.proto", 194,
  &descriptor_table_BlockUpdate_2eproto_once, descriptor_table_BlockUpdate_2eproto_sccs, descriptor_table_BlockUpdate_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_BlockUpdate_2eproto::offsets,
  file_level_metadata_BlockUpdate_2eproto, 2, file_level_enum_descriptors_BlockUpdate_2eproto, file_level_service_descriptors_BlockUpdate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_BlockUpdate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_BlockUpdate_2eproto)), true);
namespace packet {

// ===================================================================

class BlockUpdate_Vector3::_Internal {
 public:
};

BlockUpdate_Vector3::BlockUpdate_Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:packet.BlockUpdate.Vector3)
}
BlockUpdate_Vector3::BlockUpdate_Vector3(const BlockUpdate_Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:packet.BlockUpdate.Vector3)
}

void BlockUpdate_Vector3::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

BlockUpdate_Vector3::~BlockUpdate_Vector3() {
  // @@protoc_insertion_point(destructor:packet.BlockUpdate.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockUpdate_Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockUpdate_Vector3::ArenaDtor(void* object) {
  BlockUpdate_Vector3* _this = reinterpret_cast< BlockUpdate_Vector3* >(object);
  (void)_this;
}
void BlockUpdate_Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockUpdate_Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockUpdate_Vector3& BlockUpdate_Vector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockUpdate_Vector3_BlockUpdate_2eproto.base);
  return *internal_default_instance();
}


void BlockUpdate_Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.BlockUpdate.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockUpdate_Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockUpdate_Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.BlockUpdate.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 z = 3;
  if (this->z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.BlockUpdate.Vector3)
  return target;
}

size_t BlockUpdate_Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.BlockUpdate.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockUpdate_Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.BlockUpdate.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockUpdate_Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockUpdate_Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.BlockUpdate.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.BlockUpdate.Vector3)
    MergeFrom(*source);
  }
}

void BlockUpdate_Vector3::MergeFrom(const BlockUpdate_Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.BlockUpdate.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.z() != 0) {
    _internal_set_z(from._internal_z());
  }
}

void BlockUpdate_Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.BlockUpdate.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockUpdate_Vector3::CopyFrom(const BlockUpdate_Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.BlockUpdate.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockUpdate_Vector3::IsInitialized() const {
  return true;
}

void BlockUpdate_Vector3::InternalSwap(BlockUpdate_Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockUpdate_Vector3, z_)
      + sizeof(BlockUpdate_Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(BlockUpdate_Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockUpdate_Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockUpdate::_Internal {
 public:
  static const ::packet::BlockUpdate_Vector3& position(const BlockUpdate* msg);
};

const ::packet::BlockUpdate_Vector3&
BlockUpdate::_Internal::position(const BlockUpdate* msg) {
  return *msg->position_;
}
BlockUpdate::BlockUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:packet.BlockUpdate)
}
BlockUpdate::BlockUpdate(const BlockUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::packet::BlockUpdate_Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&packetid_, &from.packetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&blockdata_) -
    reinterpret_cast<char*>(&packetid_)) + sizeof(blockdata_));
  // @@protoc_insertion_point(copy_constructor:packet.BlockUpdate)
}

void BlockUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockUpdate_BlockUpdate_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&blockdata_) -
      reinterpret_cast<char*>(&position_)) + sizeof(blockdata_));
}

BlockUpdate::~BlockUpdate() {
  // @@protoc_insertion_point(destructor:packet.BlockUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void BlockUpdate::ArenaDtor(void* object) {
  BlockUpdate* _this = reinterpret_cast< BlockUpdate* >(object);
  (void)_this;
}
void BlockUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockUpdate& BlockUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockUpdate_BlockUpdate_2eproto.base);
  return *internal_default_instance();
}


void BlockUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.BlockUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&packetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockdata_) -
      reinterpret_cast<char*>(&packetid_)) + sizeof(blockdata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 packetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .packet.BlockUpdate.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blockData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blockdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.BlockUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 packetId = 1;
  if (this->packetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_packetid(), target);
  }

  // .packet.BlockUpdate.Vector3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // int32 block = 3;
  if (this->block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_block(), target);
  }

  // int32 blockData = 4;
  if (this->blockdata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_blockdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packet.BlockUpdate)
  return target;
}

size_t BlockUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packet.BlockUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .packet.BlockUpdate.Vector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 packetId = 1;
  if (this->packetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packetid());
  }

  // int32 block = 3;
  if (this->block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block());
  }

  // int32 blockData = 4;
  if (this->blockdata() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blockdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.BlockUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.BlockUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.BlockUpdate)
    MergeFrom(*source);
  }
}

void BlockUpdate::MergeFrom(const BlockUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.BlockUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::packet::BlockUpdate_Vector3::MergeFrom(from._internal_position());
  }
  if (from.packetid() != 0) {
    _internal_set_packetid(from._internal_packetid());
  }
  if (from.block() != 0) {
    _internal_set_block(from._internal_block());
  }
  if (from.blockdata() != 0) {
    _internal_set_blockdata(from._internal_blockdata());
  }
}

void BlockUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.BlockUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockUpdate::CopyFrom(const BlockUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.BlockUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockUpdate::IsInitialized() const {
  return true;
}

void BlockUpdate::InternalSwap(BlockUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockUpdate, blockdata_)
      + sizeof(BlockUpdate::blockdata_)
      - PROTOBUF_FIELD_OFFSET(BlockUpdate, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace packet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::packet::BlockUpdate_Vector3* Arena::CreateMaybeMessage< ::packet::BlockUpdate_Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::BlockUpdate_Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::packet::BlockUpdate* Arena::CreateMaybeMessage< ::packet::BlockUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::packet::BlockUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
#pragma warning(pop)