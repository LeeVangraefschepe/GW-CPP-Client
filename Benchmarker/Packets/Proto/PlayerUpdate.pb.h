#pragma once
#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4127)
#pragma warning(disable : 4996)
#pragma warning(disable : 5054)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerUpdate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PlayerUpdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PlayerUpdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PlayerUpdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PlayerUpdate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PlayerUpdate_2eproto;
namespace packet {
class PlayerUpdate;
class PlayerUpdateDefaultTypeInternal;
extern PlayerUpdateDefaultTypeInternal _PlayerUpdate_default_instance_;
class PlayerUpdate_Vector3f;
class PlayerUpdate_Vector3fDefaultTypeInternal;
extern PlayerUpdate_Vector3fDefaultTypeInternal _PlayerUpdate_Vector3f_default_instance_;
}  // namespace packet
PROTOBUF_NAMESPACE_OPEN
template<> ::packet::PlayerUpdate* Arena::CreateMaybeMessage<::packet::PlayerUpdate>(Arena*);
template<> ::packet::PlayerUpdate_Vector3f* Arena::CreateMaybeMessage<::packet::PlayerUpdate_Vector3f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace packet {

// ===================================================================

class PlayerUpdate_Vector3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.PlayerUpdate.Vector3f) */ {
 public:
  inline PlayerUpdate_Vector3f() : PlayerUpdate_Vector3f(nullptr) {}
  virtual ~PlayerUpdate_Vector3f();

  PlayerUpdate_Vector3f(const PlayerUpdate_Vector3f& from);
  PlayerUpdate_Vector3f(PlayerUpdate_Vector3f&& from) noexcept
    : PlayerUpdate_Vector3f() {
    *this = ::std::move(from);
  }

  inline PlayerUpdate_Vector3f& operator=(const PlayerUpdate_Vector3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerUpdate_Vector3f& operator=(PlayerUpdate_Vector3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerUpdate_Vector3f& default_instance();

  static inline const PlayerUpdate_Vector3f* internal_default_instance() {
    return reinterpret_cast<const PlayerUpdate_Vector3f*>(
               &_PlayerUpdate_Vector3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerUpdate_Vector3f& a, PlayerUpdate_Vector3f& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerUpdate_Vector3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerUpdate_Vector3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerUpdate_Vector3f* New() const final {
    return CreateMaybeMessage<PlayerUpdate_Vector3f>(nullptr);
  }

  PlayerUpdate_Vector3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerUpdate_Vector3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerUpdate_Vector3f& from);
  void MergeFrom(const PlayerUpdate_Vector3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerUpdate_Vector3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.PlayerUpdate.Vector3f";
  }
  protected:
  explicit PlayerUpdate_Vector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlayerUpdate_2eproto);
    return ::descriptor_table_PlayerUpdate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:packet.PlayerUpdate.Vector3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlayerUpdate_2eproto;
};
// -------------------------------------------------------------------

class PlayerUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packet.PlayerUpdate) */ {
 public:
  inline PlayerUpdate() : PlayerUpdate(nullptr) {}
  virtual ~PlayerUpdate();

  PlayerUpdate(const PlayerUpdate& from);
  PlayerUpdate(PlayerUpdate&& from) noexcept
    : PlayerUpdate() {
    *this = ::std::move(from);
  }

  inline PlayerUpdate& operator=(const PlayerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerUpdate& operator=(PlayerUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerUpdate& default_instance();

  static inline const PlayerUpdate* internal_default_instance() {
    return reinterpret_cast<const PlayerUpdate*>(
               &_PlayerUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerUpdate& a, PlayerUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerUpdate* New() const final {
    return CreateMaybeMessage<PlayerUpdate>(nullptr);
  }

  PlayerUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerUpdate& from);
  void MergeFrom(const PlayerUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packet.PlayerUpdate";
  }
  protected:
  explicit PlayerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PlayerUpdate_2eproto);
    return ::descriptor_table_PlayerUpdate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlayerUpdate_Vector3f Vector3f;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 6,
    kHeadRotationFieldNumber = 7,
    kPacketIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kHealthFieldNumber = 4,
    kOnGroundFieldNumber = 5,
  };
  // .packet.PlayerUpdate.Vector3f position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::packet::PlayerUpdate_Vector3f& position() const;
  ::packet::PlayerUpdate_Vector3f* release_position();
  ::packet::PlayerUpdate_Vector3f* mutable_position();
  void set_allocated_position(::packet::PlayerUpdate_Vector3f* position);
  private:
  const ::packet::PlayerUpdate_Vector3f& _internal_position() const;
  ::packet::PlayerUpdate_Vector3f* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::packet::PlayerUpdate_Vector3f* position);
  ::packet::PlayerUpdate_Vector3f* unsafe_arena_release_position();

  // .packet.PlayerUpdate.Vector3f rotation = 6;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::packet::PlayerUpdate_Vector3f& rotation() const;
  ::packet::PlayerUpdate_Vector3f* release_rotation();
  ::packet::PlayerUpdate_Vector3f* mutable_rotation();
  void set_allocated_rotation(::packet::PlayerUpdate_Vector3f* rotation);
  private:
  const ::packet::PlayerUpdate_Vector3f& _internal_rotation() const;
  ::packet::PlayerUpdate_Vector3f* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::packet::PlayerUpdate_Vector3f* rotation);
  ::packet::PlayerUpdate_Vector3f* unsafe_arena_release_rotation();

  // .packet.PlayerUpdate.Vector3f headRotation = 7;
  bool has_headrotation() const;
  private:
  bool _internal_has_headrotation() const;
  public:
  void clear_headrotation();
  const ::packet::PlayerUpdate_Vector3f& headrotation() const;
  ::packet::PlayerUpdate_Vector3f* release_headrotation();
  ::packet::PlayerUpdate_Vector3f* mutable_headrotation();
  void set_allocated_headrotation(::packet::PlayerUpdate_Vector3f* headrotation);
  private:
  const ::packet::PlayerUpdate_Vector3f& _internal_headrotation() const;
  ::packet::PlayerUpdate_Vector3f* _internal_mutable_headrotation();
  public:
  void unsafe_arena_set_allocated_headrotation(
      ::packet::PlayerUpdate_Vector3f* headrotation);
  ::packet::PlayerUpdate_Vector3f* unsafe_arena_release_headrotation();

  // int32 packetId = 1;
  void clear_packetid();
  ::PROTOBUF_NAMESPACE_ID::int32 packetid() const;
  void set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packetid() const;
  void _internal_set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerId = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 health = 4;
  void clear_health();
  ::PROTOBUF_NAMESPACE_ID::int32 health() const;
  void set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_health() const;
  void _internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool onGround = 5;
  void clear_onground();
  bool onground() const;
  void set_onground(bool value);
  private:
  bool _internal_onground() const;
  void _internal_set_onground(bool value);
  public:

  // @@protoc_insertion_point(class_scope:packet.PlayerUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::packet::PlayerUpdate_Vector3f* position_;
  ::packet::PlayerUpdate_Vector3f* rotation_;
  ::packet::PlayerUpdate_Vector3f* headrotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 packetid_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 health_;
  bool onground_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlayerUpdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerUpdate_Vector3f

// float x = 1;
inline void PlayerUpdate_Vector3f::clear_x() {
  x_ = 0;
}
inline float PlayerUpdate_Vector3f::_internal_x() const {
  return x_;
}
inline float PlayerUpdate_Vector3f::x() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.Vector3f.x)
  return _internal_x();
}
inline void PlayerUpdate_Vector3f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerUpdate_Vector3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:packet.PlayerUpdate.Vector3f.x)
}

// float y = 2;
inline void PlayerUpdate_Vector3f::clear_y() {
  y_ = 0;
}
inline float PlayerUpdate_Vector3f::_internal_y() const {
  return y_;
}
inline float PlayerUpdate_Vector3f::y() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.Vector3f.y)
  return _internal_y();
}
inline void PlayerUpdate_Vector3f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerUpdate_Vector3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:packet.PlayerUpdate.Vector3f.y)
}

// float z = 3;
inline void PlayerUpdate_Vector3f::clear_z() {
  z_ = 0;
}
inline float PlayerUpdate_Vector3f::_internal_z() const {
  return z_;
}
inline float PlayerUpdate_Vector3f::z() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.Vector3f.z)
  return _internal_z();
}
inline void PlayerUpdate_Vector3f::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PlayerUpdate_Vector3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:packet.PlayerUpdate.Vector3f.z)
}

// -------------------------------------------------------------------

// PlayerUpdate

// int32 packetId = 1;
inline void PlayerUpdate::clear_packetid() {
  packetid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerUpdate::_internal_packetid() const {
  return packetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerUpdate::packetid() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.packetId)
  return _internal_packetid();
}
inline void PlayerUpdate::_internal_set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packetid_ = value;
}
inline void PlayerUpdate::set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packetid(value);
  // @@protoc_insertion_point(field_set:packet.PlayerUpdate.packetId)
}

// int32 playerId = 2;
inline void PlayerUpdate::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerUpdate::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerUpdate::playerid() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.playerId)
  return _internal_playerid();
}
inline void PlayerUpdate::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void PlayerUpdate::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:packet.PlayerUpdate.playerId)
}

// .packet.PlayerUpdate.Vector3f position = 3;
inline bool PlayerUpdate::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PlayerUpdate::has_position() const {
  return _internal_has_position();
}
inline void PlayerUpdate::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::packet::PlayerUpdate_Vector3f& PlayerUpdate::_internal_position() const {
  const ::packet::PlayerUpdate_Vector3f* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::packet::PlayerUpdate_Vector3f&>(
      ::packet::_PlayerUpdate_Vector3f_default_instance_);
}
inline const ::packet::PlayerUpdate_Vector3f& PlayerUpdate::position() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.position)
  return _internal_position();
}
inline void PlayerUpdate::unsafe_arena_set_allocated_position(
    ::packet::PlayerUpdate_Vector3f* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.PlayerUpdate.position)
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::release_position() {
  
  ::packet::PlayerUpdate_Vector3f* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:packet.PlayerUpdate.position)
  
  ::packet::PlayerUpdate_Vector3f* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::packet::PlayerUpdate_Vector3f>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::mutable_position() {
  // @@protoc_insertion_point(field_mutable:packet.PlayerUpdate.position)
  return _internal_mutable_position();
}
inline void PlayerUpdate::set_allocated_position(::packet::PlayerUpdate_Vector3f* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:packet.PlayerUpdate.position)
}

// int32 health = 4;
inline void PlayerUpdate::clear_health() {
  health_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerUpdate::_internal_health() const {
  return health_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerUpdate::health() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.health)
  return _internal_health();
}
inline void PlayerUpdate::_internal_set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  health_ = value;
}
inline void PlayerUpdate::set_health(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:packet.PlayerUpdate.health)
}

// bool onGround = 5;
inline void PlayerUpdate::clear_onground() {
  onground_ = false;
}
inline bool PlayerUpdate::_internal_onground() const {
  return onground_;
}
inline bool PlayerUpdate::onground() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.onGround)
  return _internal_onground();
}
inline void PlayerUpdate::_internal_set_onground(bool value) {
  
  onground_ = value;
}
inline void PlayerUpdate::set_onground(bool value) {
  _internal_set_onground(value);
  // @@protoc_insertion_point(field_set:packet.PlayerUpdate.onGround)
}

// .packet.PlayerUpdate.Vector3f rotation = 6;
inline bool PlayerUpdate::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool PlayerUpdate::has_rotation() const {
  return _internal_has_rotation();
}
inline void PlayerUpdate::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::packet::PlayerUpdate_Vector3f& PlayerUpdate::_internal_rotation() const {
  const ::packet::PlayerUpdate_Vector3f* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::packet::PlayerUpdate_Vector3f&>(
      ::packet::_PlayerUpdate_Vector3f_default_instance_);
}
inline const ::packet::PlayerUpdate_Vector3f& PlayerUpdate::rotation() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.rotation)
  return _internal_rotation();
}
inline void PlayerUpdate::unsafe_arena_set_allocated_rotation(
    ::packet::PlayerUpdate_Vector3f* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.PlayerUpdate.rotation)
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::release_rotation() {
  
  ::packet::PlayerUpdate_Vector3f* temp = rotation_;
  rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:packet.PlayerUpdate.rotation)
  
  ::packet::PlayerUpdate_Vector3f* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::packet::PlayerUpdate_Vector3f>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:packet.PlayerUpdate.rotation)
  return _internal_mutable_rotation();
}
inline void PlayerUpdate::set_allocated_rotation(::packet::PlayerUpdate_Vector3f* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:packet.PlayerUpdate.rotation)
}

// .packet.PlayerUpdate.Vector3f headRotation = 7;
inline bool PlayerUpdate::_internal_has_headrotation() const {
  return this != internal_default_instance() && headrotation_ != nullptr;
}
inline bool PlayerUpdate::has_headrotation() const {
  return _internal_has_headrotation();
}
inline void PlayerUpdate::clear_headrotation() {
  if (GetArena() == nullptr && headrotation_ != nullptr) {
    delete headrotation_;
  }
  headrotation_ = nullptr;
}
inline const ::packet::PlayerUpdate_Vector3f& PlayerUpdate::_internal_headrotation() const {
  const ::packet::PlayerUpdate_Vector3f* p = headrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::packet::PlayerUpdate_Vector3f&>(
      ::packet::_PlayerUpdate_Vector3f_default_instance_);
}
inline const ::packet::PlayerUpdate_Vector3f& PlayerUpdate::headrotation() const {
  // @@protoc_insertion_point(field_get:packet.PlayerUpdate.headRotation)
  return _internal_headrotation();
}
inline void PlayerUpdate::unsafe_arena_set_allocated_headrotation(
    ::packet::PlayerUpdate_Vector3f* headrotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headrotation_);
  }
  headrotation_ = headrotation;
  if (headrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:packet.PlayerUpdate.headRotation)
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::release_headrotation() {
  
  ::packet::PlayerUpdate_Vector3f* temp = headrotation_;
  headrotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::unsafe_arena_release_headrotation() {
  // @@protoc_insertion_point(field_release:packet.PlayerUpdate.headRotation)
  
  ::packet::PlayerUpdate_Vector3f* temp = headrotation_;
  headrotation_ = nullptr;
  return temp;
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::_internal_mutable_headrotation() {
  
  if (headrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::packet::PlayerUpdate_Vector3f>(GetArena());
    headrotation_ = p;
  }
  return headrotation_;
}
inline ::packet::PlayerUpdate_Vector3f* PlayerUpdate::mutable_headrotation() {
  // @@protoc_insertion_point(field_mutable:packet.PlayerUpdate.headRotation)
  return _internal_mutable_headrotation();
}
inline void PlayerUpdate::set_allocated_headrotation(::packet::PlayerUpdate_Vector3f* headrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete headrotation_;
  }
  if (headrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(headrotation);
    if (message_arena != submessage_arena) {
      headrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headrotation, submessage_arena);
    }
    
  } else {
    
  }
  headrotation_ = headrotation;
  // @@protoc_insertion_point(field_set_allocated:packet.PlayerUpdate.headRotation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PlayerUpdate_2eproto
#pragma warning(pop)