#pragma once
#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4127)
#pragma warning(disable : 4996)
#pragma warning(disable : 5054)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chunk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chunk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chunk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chunk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chunk_2eproto;
class ChunkData;
class ChunkDataDefaultTypeInternal;
extern ChunkDataDefaultTypeInternal _ChunkData_default_instance_;
class ChunkData_ChunkRow;
class ChunkData_ChunkRowDefaultTypeInternal;
extern ChunkData_ChunkRowDefaultTypeInternal _ChunkData_ChunkRow_default_instance_;
class ChunkData_ChunkSlice;
class ChunkData_ChunkSliceDefaultTypeInternal;
extern ChunkData_ChunkSliceDefaultTypeInternal _ChunkData_ChunkSlice_default_instance_;
class ChunkData_Vector2;
class ChunkData_Vector2DefaultTypeInternal;
extern ChunkData_Vector2DefaultTypeInternal _ChunkData_Vector2_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChunkData* Arena::CreateMaybeMessage<::ChunkData>(Arena*);
template<> ::ChunkData_ChunkRow* Arena::CreateMaybeMessage<::ChunkData_ChunkRow>(Arena*);
template<> ::ChunkData_ChunkSlice* Arena::CreateMaybeMessage<::ChunkData_ChunkSlice>(Arena*);
template<> ::ChunkData_Vector2* Arena::CreateMaybeMessage<::ChunkData_Vector2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ChunkData_Vector2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChunkData.Vector2) */ {
 public:
  inline ChunkData_Vector2() : ChunkData_Vector2(nullptr) {}
  virtual ~ChunkData_Vector2();

  ChunkData_Vector2(const ChunkData_Vector2& from);
  ChunkData_Vector2(ChunkData_Vector2&& from) noexcept
    : ChunkData_Vector2() {
    *this = ::std::move(from);
  }

  inline ChunkData_Vector2& operator=(const ChunkData_Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkData_Vector2& operator=(ChunkData_Vector2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkData_Vector2& default_instance();

  static inline const ChunkData_Vector2* internal_default_instance() {
    return reinterpret_cast<const ChunkData_Vector2*>(
               &_ChunkData_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChunkData_Vector2& a, ChunkData_Vector2& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkData_Vector2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkData_Vector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkData_Vector2* New() const final {
    return CreateMaybeMessage<ChunkData_Vector2>(nullptr);
  }

  ChunkData_Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkData_Vector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkData_Vector2& from);
  void MergeFrom(const ChunkData_Vector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkData_Vector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChunkData.Vector2";
  }
  protected:
  explicit ChunkData_Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chunk_2eproto);
    return ::descriptor_table_Chunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChunkData.Vector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chunk_2eproto;
};
// -------------------------------------------------------------------

class ChunkData_ChunkSlice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChunkData.ChunkSlice) */ {
 public:
  inline ChunkData_ChunkSlice() : ChunkData_ChunkSlice(nullptr) {}
  virtual ~ChunkData_ChunkSlice();

  ChunkData_ChunkSlice(const ChunkData_ChunkSlice& from);
  ChunkData_ChunkSlice(ChunkData_ChunkSlice&& from) noexcept
    : ChunkData_ChunkSlice() {
    *this = ::std::move(from);
  }

  inline ChunkData_ChunkSlice& operator=(const ChunkData_ChunkSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkData_ChunkSlice& operator=(ChunkData_ChunkSlice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkData_ChunkSlice& default_instance();

  static inline const ChunkData_ChunkSlice* internal_default_instance() {
    return reinterpret_cast<const ChunkData_ChunkSlice*>(
               &_ChunkData_ChunkSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChunkData_ChunkSlice& a, ChunkData_ChunkSlice& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkData_ChunkSlice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkData_ChunkSlice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkData_ChunkSlice* New() const final {
    return CreateMaybeMessage<ChunkData_ChunkSlice>(nullptr);
  }

  ChunkData_ChunkSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkData_ChunkSlice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkData_ChunkSlice& from);
  void MergeFrom(const ChunkData_ChunkSlice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkData_ChunkSlice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChunkData.ChunkSlice";
  }
  protected:
  explicit ChunkData_ChunkSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chunk_2eproto);
    return ::descriptor_table_Chunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int32 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:ChunkData.ChunkSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chunk_2eproto;
};
// -------------------------------------------------------------------

class ChunkData_ChunkRow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChunkData.ChunkRow) */ {
 public:
  inline ChunkData_ChunkRow() : ChunkData_ChunkRow(nullptr) {}
  virtual ~ChunkData_ChunkRow();

  ChunkData_ChunkRow(const ChunkData_ChunkRow& from);
  ChunkData_ChunkRow(ChunkData_ChunkRow&& from) noexcept
    : ChunkData_ChunkRow() {
    *this = ::std::move(from);
  }

  inline ChunkData_ChunkRow& operator=(const ChunkData_ChunkRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkData_ChunkRow& operator=(ChunkData_ChunkRow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkData_ChunkRow& default_instance();

  static inline const ChunkData_ChunkRow* internal_default_instance() {
    return reinterpret_cast<const ChunkData_ChunkRow*>(
               &_ChunkData_ChunkRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChunkData_ChunkRow& a, ChunkData_ChunkRow& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkData_ChunkRow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkData_ChunkRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkData_ChunkRow* New() const final {
    return CreateMaybeMessage<ChunkData_ChunkRow>(nullptr);
  }

  ChunkData_ChunkRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkData_ChunkRow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkData_ChunkRow& from);
  void MergeFrom(const ChunkData_ChunkRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkData_ChunkRow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChunkData.ChunkRow";
  }
  protected:
  explicit ChunkData_ChunkRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chunk_2eproto);
    return ::descriptor_table_Chunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicesFieldNumber = 1,
  };
  // repeated .ChunkData.ChunkSlice slices = 1;
  int slices_size() const;
  private:
  int _internal_slices_size() const;
  public:
  void clear_slices();
  ::ChunkData_ChunkSlice* mutable_slices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkSlice >*
      mutable_slices();
  private:
  const ::ChunkData_ChunkSlice& _internal_slices(int index) const;
  ::ChunkData_ChunkSlice* _internal_add_slices();
  public:
  const ::ChunkData_ChunkSlice& slices(int index) const;
  ::ChunkData_ChunkSlice* add_slices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkSlice >&
      slices() const;

  // @@protoc_insertion_point(class_scope:ChunkData.ChunkRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkSlice > slices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chunk_2eproto;
};
// -------------------------------------------------------------------

class ChunkData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChunkData) */ {
 public:
  inline ChunkData() : ChunkData(nullptr) {}
  virtual ~ChunkData();

  ChunkData(const ChunkData& from);
  ChunkData(ChunkData&& from) noexcept
    : ChunkData() {
    *this = ::std::move(from);
  }

  inline ChunkData& operator=(const ChunkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkData& operator=(ChunkData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkData& default_instance();

  static inline const ChunkData* internal_default_instance() {
    return reinterpret_cast<const ChunkData*>(
               &_ChunkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChunkData& a, ChunkData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkData* New() const final {
    return CreateMaybeMessage<ChunkData>(nullptr);
  }

  ChunkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkData& from);
  void MergeFrom(const ChunkData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChunkData";
  }
  protected:
  explicit ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chunk_2eproto);
    return ::descriptor_table_Chunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChunkData_Vector2 Vector2;
  typedef ChunkData_ChunkSlice ChunkSlice;
  typedef ChunkData_ChunkRow ChunkRow;

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 4,
    kPositionFieldNumber = 2,
    kPacketIdFieldNumber = 1,
    kBiomeFieldNumber = 3,
  };
  // repeated .ChunkData.ChunkRow chunk = 4;
  int chunk_size() const;
  private:
  int _internal_chunk_size() const;
  public:
  void clear_chunk();
  ::ChunkData_ChunkRow* mutable_chunk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkRow >*
      mutable_chunk();
  private:
  const ::ChunkData_ChunkRow& _internal_chunk(int index) const;
  ::ChunkData_ChunkRow* _internal_add_chunk();
  public:
  const ::ChunkData_ChunkRow& chunk(int index) const;
  ::ChunkData_ChunkRow* add_chunk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkRow >&
      chunk() const;

  // .ChunkData.Vector2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ChunkData_Vector2& position() const;
  ::ChunkData_Vector2* release_position();
  ::ChunkData_Vector2* mutable_position();
  void set_allocated_position(::ChunkData_Vector2* position);
  private:
  const ::ChunkData_Vector2& _internal_position() const;
  ::ChunkData_Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ChunkData_Vector2* position);
  ::ChunkData_Vector2* unsafe_arena_release_position();

  // int32 packet_id = 1;
  void clear_packet_id();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_id() const;
  void set_packet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packet_id() const;
  void _internal_set_packet_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 biome = 3;
  void clear_biome();
  ::PROTOBUF_NAMESPACE_ID::int32 biome() const;
  void set_biome(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_biome() const;
  void _internal_set_biome(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChunkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkRow > chunk_;
  ::ChunkData_Vector2* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 biome_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chunk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChunkData_Vector2

// int32 x = 1;
inline void ChunkData_Vector2::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData_Vector2::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData_Vector2::x() const {
  // @@protoc_insertion_point(field_get:ChunkData.Vector2.x)
  return _internal_x();
}
inline void ChunkData_Vector2::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void ChunkData_Vector2::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ChunkData.Vector2.x)
}

// int32 y = 2;
inline void ChunkData_Vector2::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData_Vector2::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData_Vector2::y() const {
  // @@protoc_insertion_point(field_get:ChunkData.Vector2.y)
  return _internal_y();
}
inline void ChunkData_Vector2::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void ChunkData_Vector2::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ChunkData.Vector2.y)
}

// -------------------------------------------------------------------

// ChunkData_ChunkSlice

// repeated int32 values = 1;
inline int ChunkData_ChunkSlice::_internal_values_size() const {
  return values_.size();
}
inline int ChunkData_ChunkSlice::values_size() const {
  return _internal_values_size();
}
inline void ChunkData_ChunkSlice::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData_ChunkSlice::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData_ChunkSlice::values(int index) const {
  // @@protoc_insertion_point(field_get:ChunkData.ChunkSlice.values)
  return _internal_values(index);
}
inline void ChunkData_ChunkSlice::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChunkData.ChunkSlice.values)
}
inline void ChunkData_ChunkSlice::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
}
inline void ChunkData_ChunkSlice::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:ChunkData.ChunkSlice.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ChunkData_ChunkSlice::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ChunkData_ChunkSlice::values() const {
  // @@protoc_insertion_point(field_list:ChunkData.ChunkSlice.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ChunkData_ChunkSlice::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ChunkData_ChunkSlice::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ChunkData.ChunkSlice.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// ChunkData_ChunkRow

// repeated .ChunkData.ChunkSlice slices = 1;
inline int ChunkData_ChunkRow::_internal_slices_size() const {
  return slices_.size();
}
inline int ChunkData_ChunkRow::slices_size() const {
  return _internal_slices_size();
}
inline void ChunkData_ChunkRow::clear_slices() {
  slices_.Clear();
}
inline ::ChunkData_ChunkSlice* ChunkData_ChunkRow::mutable_slices(int index) {
  // @@protoc_insertion_point(field_mutable:ChunkData.ChunkRow.slices)
  return slices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkSlice >*
ChunkData_ChunkRow::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:ChunkData.ChunkRow.slices)
  return &slices_;
}
inline const ::ChunkData_ChunkSlice& ChunkData_ChunkRow::_internal_slices(int index) const {
  return slices_.Get(index);
}
inline const ::ChunkData_ChunkSlice& ChunkData_ChunkRow::slices(int index) const {
  // @@protoc_insertion_point(field_get:ChunkData.ChunkRow.slices)
  return _internal_slices(index);
}
inline ::ChunkData_ChunkSlice* ChunkData_ChunkRow::_internal_add_slices() {
  return slices_.Add();
}
inline ::ChunkData_ChunkSlice* ChunkData_ChunkRow::add_slices() {
  // @@protoc_insertion_point(field_add:ChunkData.ChunkRow.slices)
  return _internal_add_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkSlice >&
ChunkData_ChunkRow::slices() const {
  // @@protoc_insertion_point(field_list:ChunkData.ChunkRow.slices)
  return slices_;
}

// -------------------------------------------------------------------

// ChunkData

// int32 packet_id = 1;
inline void ChunkData::clear_packet_id() {
  packet_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData::_internal_packet_id() const {
  return packet_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData::packet_id() const {
  // @@protoc_insertion_point(field_get:ChunkData.packet_id)
  return _internal_packet_id();
}
inline void ChunkData::_internal_set_packet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packet_id_ = value;
}
inline void ChunkData::set_packet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packet_id(value);
  // @@protoc_insertion_point(field_set:ChunkData.packet_id)
}

// .ChunkData.Vector2 position = 2;
inline bool ChunkData::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool ChunkData::has_position() const {
  return _internal_has_position();
}
inline void ChunkData::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ChunkData_Vector2& ChunkData::_internal_position() const {
  const ::ChunkData_Vector2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChunkData_Vector2&>(
      ::_ChunkData_Vector2_default_instance_);
}
inline const ::ChunkData_Vector2& ChunkData::position() const {
  // @@protoc_insertion_point(field_get:ChunkData.position)
  return _internal_position();
}
inline void ChunkData::unsafe_arena_set_allocated_position(
    ::ChunkData_Vector2* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChunkData.position)
}
inline ::ChunkData_Vector2* ChunkData::release_position() {
  
  ::ChunkData_Vector2* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChunkData_Vector2* ChunkData::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ChunkData.position)
  
  ::ChunkData_Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ChunkData_Vector2* ChunkData::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChunkData_Vector2>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::ChunkData_Vector2* ChunkData::mutable_position() {
  // @@protoc_insertion_point(field_mutable:ChunkData.position)
  return _internal_mutable_position();
}
inline void ChunkData::set_allocated_position(::ChunkData_Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ChunkData.position)
}

// int32 biome = 3;
inline void ChunkData::clear_biome() {
  biome_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData::_internal_biome() const {
  return biome_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData::biome() const {
  // @@protoc_insertion_point(field_get:ChunkData.biome)
  return _internal_biome();
}
inline void ChunkData::_internal_set_biome(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  biome_ = value;
}
inline void ChunkData::set_biome(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_biome(value);
  // @@protoc_insertion_point(field_set:ChunkData.biome)
}

// repeated .ChunkData.ChunkRow chunk = 4;
inline int ChunkData::_internal_chunk_size() const {
  return chunk_.size();
}
inline int ChunkData::chunk_size() const {
  return _internal_chunk_size();
}
inline void ChunkData::clear_chunk() {
  chunk_.Clear();
}
inline ::ChunkData_ChunkRow* ChunkData::mutable_chunk(int index) {
  // @@protoc_insertion_point(field_mutable:ChunkData.chunk)
  return chunk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkRow >*
ChunkData::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable_list:ChunkData.chunk)
  return &chunk_;
}
inline const ::ChunkData_ChunkRow& ChunkData::_internal_chunk(int index) const {
  return chunk_.Get(index);
}
inline const ::ChunkData_ChunkRow& ChunkData::chunk(int index) const {
  // @@protoc_insertion_point(field_get:ChunkData.chunk)
  return _internal_chunk(index);
}
inline ::ChunkData_ChunkRow* ChunkData::_internal_add_chunk() {
  return chunk_.Add();
}
inline ::ChunkData_ChunkRow* ChunkData::add_chunk() {
  // @@protoc_insertion_point(field_add:ChunkData.chunk)
  return _internal_add_chunk();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChunkData_ChunkRow >&
ChunkData::chunk() const {
  // @@protoc_insertion_point(field_list:ChunkData.chunk)
  return chunk_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chunk_2eproto

#pragma warning(pop)