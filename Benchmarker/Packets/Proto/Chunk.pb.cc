#pragma warning(push)
#pragma warning(disable : 4100)
#pragma warning(disable : 4127)
#pragma warning(disable : 4996)
#pragma warning(disable : 5054)
#pragma warning(disable : 4244)
#pragma warning(disable : 4125)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chunk.proto

#include "Chunk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChunkData_ChunkRow_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChunkData_ChunkSlice_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChunkData_Vector2_Chunk_2eproto;
class ChunkData_Vector2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChunkData_Vector2> _instance;
} _ChunkData_Vector2_default_instance_;
class ChunkData_ChunkSliceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChunkData_ChunkSlice> _instance;
} _ChunkData_ChunkSlice_default_instance_;
class ChunkData_ChunkRowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChunkData_ChunkRow> _instance;
} _ChunkData_ChunkRow_default_instance_;
class ChunkDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChunkData> _instance;
} _ChunkData_default_instance_;
static void InitDefaultsscc_info_ChunkData_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChunkData_default_instance_;
    new (ptr) ::ChunkData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChunkData_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChunkData_Chunk_2eproto}, {
      &scc_info_ChunkData_Vector2_Chunk_2eproto.base,
      &scc_info_ChunkData_ChunkRow_Chunk_2eproto.base,}};

static void InitDefaultsscc_info_ChunkData_ChunkRow_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChunkData_ChunkRow_default_instance_;
    new (ptr) ::ChunkData_ChunkRow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChunkData_ChunkRow_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChunkData_ChunkRow_Chunk_2eproto}, {
      &scc_info_ChunkData_ChunkSlice_Chunk_2eproto.base,}};

static void InitDefaultsscc_info_ChunkData_ChunkSlice_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChunkData_ChunkSlice_default_instance_;
    new (ptr) ::ChunkData_ChunkSlice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChunkData_ChunkSlice_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChunkData_ChunkSlice_Chunk_2eproto}, {}};

static void InitDefaultsscc_info_ChunkData_Vector2_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChunkData_Vector2_default_instance_;
    new (ptr) ::ChunkData_Vector2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChunkData_Vector2_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChunkData_Vector2_Chunk_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Chunk_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Chunk_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Chunk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Chunk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChunkData_Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChunkData_Vector2, x_),
  PROTOBUF_FIELD_OFFSET(::ChunkData_Vector2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChunkData_ChunkSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChunkData_ChunkSlice, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChunkData_ChunkRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChunkData_ChunkRow, slices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChunkData, packet_id_),
  PROTOBUF_FIELD_OFFSET(::ChunkData, position_),
  PROTOBUF_FIELD_OFFSET(::ChunkData, biome_),
  PROTOBUF_FIELD_OFFSET(::ChunkData, chunk_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChunkData_Vector2)},
  { 7, -1, sizeof(::ChunkData_ChunkSlice)},
  { 13, -1, sizeof(::ChunkData_ChunkRow)},
  { 19, -1, sizeof(::ChunkData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChunkData_Vector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChunkData_ChunkSlice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChunkData_ChunkRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChunkData_default_instance_),
};

const char descriptor_table_protodef_Chunk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Chunk.proto\"\351\001\n\tChunkData\022\021\n\tpacket_id"
  "\030\001 \001(\005\022$\n\010position\030\002 \001(\0132\022.ChunkData.Vec"
  "tor2\022\r\n\005biome\030\003 \001(\005\022\"\n\005chunk\030\004 \003(\0132\023.Chu"
  "nkData.ChunkRow\032\037\n\007Vector2\022\t\n\001x\030\001 \001(\005\022\t\n"
  "\001y\030\002 \001(\005\032\034\n\nChunkSlice\022\016\n\006values\030\001 \003(\005\0321"
  "\n\010ChunkRow\022%\n\006slices\030\001 \003(\0132\025.ChunkData.C"
  "hunkSliceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Chunk_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Chunk_2eproto_sccs[4] = {
  &scc_info_ChunkData_Chunk_2eproto.base,
  &scc_info_ChunkData_ChunkRow_Chunk_2eproto.base,
  &scc_info_ChunkData_ChunkSlice_Chunk_2eproto.base,
  &scc_info_ChunkData_Vector2_Chunk_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Chunk_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chunk_2eproto = {
  false, false, descriptor_table_protodef_Chunk_2eproto, "Chunk.proto", 257,
  &descriptor_table_Chunk_2eproto_once, descriptor_table_Chunk_2eproto_sccs, descriptor_table_Chunk_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_Chunk_2eproto::offsets,
  file_level_metadata_Chunk_2eproto, 4, file_level_enum_descriptors_Chunk_2eproto, file_level_service_descriptors_Chunk_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Chunk_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Chunk_2eproto)), true);

// ===================================================================

class ChunkData_Vector2::_Internal {
 public:
};

ChunkData_Vector2::ChunkData_Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChunkData.Vector2)
}
ChunkData_Vector2::ChunkData_Vector2(const ChunkData_Vector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ChunkData.Vector2)
}

void ChunkData_Vector2::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

ChunkData_Vector2::~ChunkData_Vector2() {
  // @@protoc_insertion_point(destructor:ChunkData.Vector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChunkData_Vector2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChunkData_Vector2::ArenaDtor(void* object) {
  ChunkData_Vector2* _this = reinterpret_cast< ChunkData_Vector2* >(object);
  (void)_this;
}
void ChunkData_Vector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkData_Vector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChunkData_Vector2& ChunkData_Vector2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChunkData_Vector2_Chunk_2eproto.base);
  return *internal_default_instance();
}


void ChunkData_Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:ChunkData.Vector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkData_Vector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkData_Vector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChunkData.Vector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChunkData.Vector2)
  return target;
}

size_t ChunkData_Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChunkData.Vector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkData_Vector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChunkData.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkData_Vector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChunkData_Vector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChunkData.Vector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChunkData.Vector2)
    MergeFrom(*source);
  }
}

void ChunkData_Vector2::MergeFrom(const ChunkData_Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChunkData.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void ChunkData_Vector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChunkData.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkData_Vector2::CopyFrom(const ChunkData_Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChunkData.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkData_Vector2::IsInitialized() const {
  return true;
}

void ChunkData_Vector2::InternalSwap(ChunkData_Vector2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkData_Vector2, y_)
      + sizeof(ChunkData_Vector2::y_)
      - PROTOBUF_FIELD_OFFSET(ChunkData_Vector2, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkData_Vector2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChunkData_ChunkSlice::_Internal {
 public:
};

ChunkData_ChunkSlice::ChunkData_ChunkSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChunkData.ChunkSlice)
}
ChunkData_ChunkSlice::ChunkData_ChunkSlice(const ChunkData_ChunkSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChunkData.ChunkSlice)
}

void ChunkData_ChunkSlice::SharedCtor() {
}

ChunkData_ChunkSlice::~ChunkData_ChunkSlice() {
  // @@protoc_insertion_point(destructor:ChunkData.ChunkSlice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChunkData_ChunkSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChunkData_ChunkSlice::ArenaDtor(void* object) {
  ChunkData_ChunkSlice* _this = reinterpret_cast< ChunkData_ChunkSlice* >(object);
  (void)_this;
}
void ChunkData_ChunkSlice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkData_ChunkSlice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChunkData_ChunkSlice& ChunkData_ChunkSlice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChunkData_ChunkSlice_Chunk_2eproto.base);
  return *internal_default_instance();
}


void ChunkData_ChunkSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:ChunkData.ChunkSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkData_ChunkSlice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkData_ChunkSlice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChunkData.ChunkSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 values = 1;
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChunkData.ChunkSlice)
  return target;
}

size_t ChunkData_ChunkSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChunkData.ChunkSlice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 values = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkData_ChunkSlice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChunkData.ChunkSlice)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkData_ChunkSlice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChunkData_ChunkSlice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChunkData.ChunkSlice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChunkData.ChunkSlice)
    MergeFrom(*source);
  }
}

void ChunkData_ChunkSlice::MergeFrom(const ChunkData_ChunkSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChunkData.ChunkSlice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ChunkData_ChunkSlice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChunkData.ChunkSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkData_ChunkSlice::CopyFrom(const ChunkData_ChunkSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChunkData.ChunkSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkData_ChunkSlice::IsInitialized() const {
  return true;
}

void ChunkData_ChunkSlice::InternalSwap(ChunkData_ChunkSlice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkData_ChunkSlice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChunkData_ChunkRow::_Internal {
 public:
};

ChunkData_ChunkRow::ChunkData_ChunkRow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChunkData.ChunkRow)
}
ChunkData_ChunkRow::ChunkData_ChunkRow(const ChunkData_ChunkRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slices_(from.slices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChunkData.ChunkRow)
}

void ChunkData_ChunkRow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChunkData_ChunkRow_Chunk_2eproto.base);
}

ChunkData_ChunkRow::~ChunkData_ChunkRow() {
  // @@protoc_insertion_point(destructor:ChunkData.ChunkRow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChunkData_ChunkRow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChunkData_ChunkRow::ArenaDtor(void* object) {
  ChunkData_ChunkRow* _this = reinterpret_cast< ChunkData_ChunkRow* >(object);
  (void)_this;
}
void ChunkData_ChunkRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkData_ChunkRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChunkData_ChunkRow& ChunkData_ChunkRow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChunkData_ChunkRow_Chunk_2eproto.base);
  return *internal_default_instance();
}


void ChunkData_ChunkRow::Clear() {
// @@protoc_insertion_point(message_clear_start:ChunkData.ChunkRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkData_ChunkRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ChunkData.ChunkSlice slices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkData_ChunkRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChunkData.ChunkRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChunkData.ChunkSlice slices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_slices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChunkData.ChunkRow)
  return target;
}

size_t ChunkData_ChunkRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChunkData.ChunkRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChunkData.ChunkSlice slices = 1;
  total_size += 1UL * this->_internal_slices_size();
  for (const auto& msg : this->slices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkData_ChunkRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChunkData.ChunkRow)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkData_ChunkRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChunkData_ChunkRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChunkData.ChunkRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChunkData.ChunkRow)
    MergeFrom(*source);
  }
}

void ChunkData_ChunkRow::MergeFrom(const ChunkData_ChunkRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChunkData.ChunkRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slices_.MergeFrom(from.slices_);
}

void ChunkData_ChunkRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChunkData.ChunkRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkData_ChunkRow::CopyFrom(const ChunkData_ChunkRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChunkData.ChunkRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkData_ChunkRow::IsInitialized() const {
  return true;
}

void ChunkData_ChunkRow::InternalSwap(ChunkData_ChunkRow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slices_.InternalSwap(&other->slices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkData_ChunkRow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChunkData::_Internal {
 public:
  static const ::ChunkData_Vector2& position(const ChunkData* msg);
};

const ::ChunkData_Vector2&
ChunkData::_Internal::position(const ChunkData* msg) {
  return *msg->position_;
}
ChunkData::ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chunk_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChunkData)
}
ChunkData::ChunkData(const ChunkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunk_(from.chunk_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::ChunkData_Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&packet_id_, &from.packet_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&biome_) -
    reinterpret_cast<char*>(&packet_id_)) + sizeof(biome_));
  // @@protoc_insertion_point(copy_constructor:ChunkData)
}

void ChunkData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChunkData_Chunk_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&biome_) -
      reinterpret_cast<char*>(&position_)) + sizeof(biome_));
}

ChunkData::~ChunkData() {
  // @@protoc_insertion_point(destructor:ChunkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChunkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void ChunkData::ArenaDtor(void* object) {
  ChunkData* _this = reinterpret_cast< ChunkData* >(object);
  (void)_this;
}
void ChunkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChunkData& ChunkData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChunkData_Chunk_2eproto.base);
  return *internal_default_instance();
}


void ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:ChunkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_.Clear();
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&packet_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&biome_) -
      reinterpret_cast<char*>(&packet_id_)) + sizeof(biome_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChunkData.Vector2 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 biome = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          biome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ChunkData.ChunkRow chunk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChunkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 packet_id = 1;
  if (this->packet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_packet_id(), target);
  }

  // .ChunkData.Vector2 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // int32 biome = 3;
  if (this->biome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_biome(), target);
  }

  // repeated .ChunkData.ChunkRow chunk = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunk_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_chunk(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChunkData)
  return target;
}

size_t ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChunkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChunkData.ChunkRow chunk = 4;
  total_size += 1UL * this->_internal_chunk_size();
  for (const auto& msg : this->chunk_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChunkData.Vector2 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 packet_id = 1;
  if (this->packet_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packet_id());
  }

  // int32 biome = 3;
  if (this->biome() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_biome());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChunkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChunkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChunkData)
    MergeFrom(*source);
  }
}

void ChunkData::MergeFrom(const ChunkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_.MergeFrom(from.chunk_);
  if (from.has_position()) {
    _internal_mutable_position()->::ChunkData_Vector2::MergeFrom(from._internal_position());
  }
  if (from.packet_id() != 0) {
    _internal_set_packet_id(from._internal_packet_id());
  }
  if (from.biome() != 0) {
    _internal_set_biome(from._internal_biome());
  }
}

void ChunkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkData::CopyFrom(const ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkData::IsInitialized() const {
  return true;
}

void ChunkData::InternalSwap(ChunkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunk_.InternalSwap(&other->chunk_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkData, biome_)
      + sizeof(ChunkData::biome_)
      - PROTOBUF_FIELD_OFFSET(ChunkData, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChunkData_Vector2* Arena::CreateMaybeMessage< ::ChunkData_Vector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChunkData_Vector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::ChunkData_ChunkSlice* Arena::CreateMaybeMessage< ::ChunkData_ChunkSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChunkData_ChunkSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::ChunkData_ChunkRow* Arena::CreateMaybeMessage< ::ChunkData_ChunkRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChunkData_ChunkRow >(arena);
}
template<> PROTOBUF_NOINLINE ::ChunkData* Arena::CreateMaybeMessage< ::ChunkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChunkData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

#pragma warning(pop)